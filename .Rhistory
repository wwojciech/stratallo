?nopt
person("Wojciech", "Wojciak", email = "wojciech.wojciak@gmail.com", role = c("aut", "cre"))
c(
person("Wojciech", "Wojciak", email = "wojciech.wojciak@gmail.com", role = c("aut", "cre")),
person("Jacek", "Wesolowski", email = "j.wesolowski@mini.pw.edu.pl", role = "sad"),
person("Robert", "Wieczorkowski", email = "R.Wieczorkowski@stat.gov.pl", role = "ctb"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?datasets
?stratallo
?datasets
?pop507
devtools::document()
library(stratallo)
library(stratallo)
detach("package:stratallo", unload = TRUE)
library(stratallo)
library(stratallo)
force(pop969)
force(nopt)
N <- c(3000, 4000, 5000, 2000)
S <- rep(1, 4)
n_ <- nopt(n = 190, N = N, S = S, M = c(100, 90, 70, 80))
Dst(n = n_, N, S)
nopt(n = 190, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
nopt(n = 270, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
nopt(n = 300, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
nopt(n = 330, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
nopt(n = 340, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
nopt(n = 350, N = c(3000, 4000, 5000, 2000), S = rep(1, 4), M = c(100, 90, 70, 80))
N <- pop969[, "N"]
S <- pop969[, "S"]
n <- floor(0.01 * sum(N))
nopt(n, N, S)
nfrac <- seq(0.01, 0.5, 0.05)
n <- nfrac * sum(N)
n <- setNames(nfrac * sum(N), nfrac)
n
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
check = TRUE, iterations = 200)[1:6])
?bench::mark
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "us",  iterations = 200)[1:6])
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[1:6])
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[1:2])
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[c(1,3)])
sapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[1:2])
dapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[c(1,3)])
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
time_unit = "ms",  iterations = 200)[c(1,3)])
nfrac <- seq(0.01, 0.9, 0.05)
n <- setNames(nfrac * sum(N), nfrac)
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)])
devtools::document()
library(stratallo)
devtools::build()
?forecast
??forecast
detach("package:stratallo", unload = TRUE)
remove.packages("stratallo", lib="~/R/win-library/3.6")
library(stratallo)
devtools::build()
??melt
library(stratallo)
library(stratallo)
library(stratallo)
?fit
?flm
?lm
?qr
devtools::document()
devtools::revdep_check()
devtools::use_readme_rmd()
devtools:::use_readme_rmd()
insinstall.packages("devtools")
install.packages("devtools")
library(devtools)
use_readme_rmd()
.libPaths()
use_readme_rmd()
use_readme_rmd()
use_readme_rmd()
use_readme_rmd()
use_readme_rmd()
sample(100, 4)
N <- c(3000, 4000, 5000, 2000) # strata sizes
S <- c(48, 79, 76, 17) # standard deviations of a study variable in strata
S <- c(48, 79, 76, 17) # standard deviations of a study variable in strata
M <- c(100, 90, 70, 80) # upper bounds constraints imposed on the sample sizes in strata
n <- 190 # total sample size
nopt_  <- nopt(n = n, N = N, S = S, M = M)
nopt_  <- stratallo::nopt(n = n, N = N, S = S, M = M)
nopt_l
nopt_
nopt_
sum(nopt_)
all(M <= N)
d = N * S
dM <- d / M
order(dM, decreasing = TRUE)
devtools::document()
getwd()
dir()
file.remove("desktop.ini")
dir()
??stratallo
?stratallo
use_news_md()
use_cran_comments()
library(stratallo)
use_cran_comments()
version
use_cran_comments()
build()
?check_win_release()
stratallo::pop507
save(stratallo::pop507, file = "pop507.RData")
library(stratallo)
save(pop507, file = "pop507.RData")
save(pop969, file = "pop969.RData")
save(pop507, file = "pop507.RData", version = 2)
save(pop969, file = "pop969.RData", version = 2)
library(stratallo)
?devtools::check_win_release()
devtools::check_win_release("stratallo")
devtools::check_win_release("C:\Users/user1/Desktop/stratallo_0.1.0.tar.gz")
devtools::check_win_release("C:/Users/user1/Desktop/stratallo_0.1.0.tar.gz")
devtools::check_win_release("C:\Users\user1\Desktop\stratallo_0.1.0.tar.gz")
devtools::check_win_release("C:\\Users\user1\Desktop\stratallo_0.1.0.tar.gz")
devtools::check_win_release("C://Users/user1/Desktop/stratallo_0.1.0.tar.gz")
devtools::check_win_release(pkg = "C://Users/user1/Desktop")
devtools::check_win_release(pkg = "C:/Users/user1/Desktop/stratallo_0.1.0.tar.gz")
devtools::check_win_release(pkg = "C:/Users/user1/Desktop")
setwd("C:/Users/user1/Desktop")
devtools::check_win_release(pkg = "C:/Users/user1/Desktop")
devtools::check_win_release(pkg = "stratallo_0.1.0.tar.gz")
devtools::check_win_release(pkg = "stratallo")
devtools::check_win_devel(pkg = "stratallo")
??ggplot
?ggplot
??ggplot
?ggplot2
?ggplot
?gplot2
?ggplot2
?qqplot2
?ggplot2::ggplot()
?forecast
??forecast
??base
?lm
?bnlearn
??bnlearn
install.packages("bnlearn")
??bnlearn
?lattice
??lattice
install.packages("aspell")
?person
library(devtools)
build()
getwd()
setwd("C:/Users/user1/Desktop/")
release(pkg = "stratallo")
spell_check()
install.packages("spelling")
spell_check()
spell_check("stratallo")
document()
getwd()
setwd("C:/Users/user1/Desktop/stratallo")
getwd()
document()
document()
library(stratallo)
release()
library(stratallo)
?nopt
N <- pop969[, "N"]
S <- pop969[, "S"]
n <- floor(0.01 * sum(N))
nopt(n, N, S)
N <- N[nopt(n, N, S, verbose = T)$J]
S <- S[nopt(n, N, S, verbose = T)$J]
nfrac <- seq(0.01, 0.9, 0.05)
n <- setNames(nfrac * sum(N), nfrac)
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)])
nfrac <- seq(0.01, 0.9, 0.05)
n <- setNames(nfrac * sum(N), nfrac)
lapply(n, function(ni) bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)])bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)])
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)]
ni <- 0.8 * n
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)]
ni
n <- floor(0.01 * sum(N))
ni <- 0.8 * n
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 200)[c(1,3)]
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
ni <- 0.9 * n
ni <- 0.9 * sum(N)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
x <- sample(10000)
x
xs <- order(x)
x
xs
x <- sample(100000)
xs <- order(x)
x <- sample(1000000)
xs <- order(x)
bench::mark(order(x), order(xs)
iterations = 500)
bench::mark(order(x), order(xs),
iterations = 500)
bench::mark(order(x), order(xs),
iterations = 500, check = F)
bench::mark(order(x), order(xs),
iterations =2, check = F)
bench::mark(order(x), order(xs),
iterations = 10, check = F)
bench::mark(order(x), order(xs),
iterations = 20, check = F)
bench::mark(order(x), order(xs),
iterations = 20, check = F)
bench::mark(sort(x), sort(xs),
iterations = 20, check = F)
bench::mark(sort(x), sort(xs),
iterations = 20, check = F)
bench::mark(order(x), order(xs),
iterations = 20, check = F)
x[xs]
bench::mark(order(x), order(xs),
iterations = 40, check = F)
bench::mark(order(x), order(xs),
iterations = 100, check = F)
length(x)
x <- length(x):1
xx <- 1:length(x)
bench::mark(order(x), order(xx),
iterations = 100, check = F)
bench::mark(order(x), order(xx),
iterations = 100, check = F)
xx
bench::mark(order(x), order(xx),
iterations = 100, check = F)
x
bench::mark(order(x), order(xx),
iterations = 100, check = F)
N * S
order(N * S)
N <- pop969[, "N"]
S <- pop969[, "S"]
order(S)
?coma
coma
order(S, decreasing = T)
S <- S[order(S, decreasing = T)]
S
plot(S)
S - c(S[-1] ,0)
diff(S)
diff(S) < 0
all(diff(S) < 0)
N <- N[order(S, decreasing = T)]
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
n <- sum(N)
ni <- 0.9 * n
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 1000)
order(N * S / N, decreasing = T)
plot(order(N * S / N, decreasing = T))
plot(N * S / N)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
nopt(ni, N, S, method = "rNa"),
iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N, S, method = "sa1"),
nopt(ni, N, S, method = "coma"),
q
iqterations = 500)
nopt(ni, N, S, method = "sa0")
nopt(ni, N, S, method = "sa0", verbose = T)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"),            iqterations = 500)
N1 <- pop969[, "N"]
S1 <- pop969[, "S"]
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), iterations = 500)
N1
S1
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 500)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "sa0"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "rNa"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "rNa"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "rNa"), check = F, iterations = 1000)
bench::mark(nopt(ni, N, S, method = "sa0"),
nopt(ni, N1, S1, method = "rNa"), check = F, iterations = 1000)
sa0
sa00 <- function(d, M, J, n, verbose = FALSE) {
H <- length(d)
dM <- d / M
#J <- order(dM, decreasing = TRUE)
# J - set of srata indices sorted by d/M in non-increasing order
# it preserves the relative order of elements with equivalent values
ds <- sum(d)
ksi <- n / ds
for (k in 1:H) {
h <- J[k]
if (ksi * dM[h] < 1)
break
else {
n <- n - M[h]
ds <- ds - d[h]
ksi <- n / ds
}
}
if(k == 1) # if else construct used here only to improve the performance, otherwise it could be just the body of the else block
nopt <-  ksi * d  # ksi * d < M for all strata
else {
nopt <- M
nopt[J[k:H]] <- ksi * d[J[k:H]]
}
if(verbose) # more detailed output
nopt <- list(nopt = nopt, ksi = ksi, J = J, J_ = J[k:H])
return(nopt)
}
J <- order(S, decreasing = TRUE)
N <- pop969[, "N"]
S <- pop969[, "S"]
bench::mark(sa00(d = N * S, M = N, J = J, n = ni),
nopt(ni, N, S, method = "rNa"), check = F, iterations = 1000)
bench::mark(sa00(d = N * S, M = N, J = J, n = ni),
nopt(ni, N, S, method = "rNa"), check = F, iterations = 1000)
sa00 <- function(N, S, J, n, verbose = FALSE) {
d <- N * S
M <- N
H <- length(d)
dM <- d / M
#J <- order(dM, decreasing = TRUE)
# J - set of srata indices sorted by d/M in non-increasing order
# it preserves the relative order of elements with equivalent values
ds <- sum(d)
ksi <- n / ds
for (k in 1:H) {
h <- J[k]
if (ksi * dM[h] < 1)
break
else {
n <- n - M[h]
ds <- ds - d[h]
ksi <- n / ds
}
}
if(k == 1) # if else construct used here only to improve the performance, otherwise it could be just the body of the else block
nopt <-  ksi * d  # ksi * d < M for all strata
else {
nopt <- M
nopt[J[k:H]] <- ksi * d[J[k:H]]
}
if(verbose) # more detailed output
nopt <- list(nopt = nopt, ksi = ksi, J = J, J_ = J[k:H])
return(nopt)
}
bench::mark(sa00(N, S, J, ni),
nopt(ni, N, S, method = "rNa"), check = F, iterations = 1000)
bench::mark(sa00(N, S, J, ni),
nopt(ni, N, S, method = "rNa"), check = F, iterations = 1000)
bench::mark(order(N * S / M, decreasing = T), check = F, iterations = 1000)
bench::mark(order(N * S / N, decreasing = T), check = F, iterations = 1000)
S1 <- S[order(S, decreasing = T)]
N1 <- N[order(S, decreasing = T)]
bench::mark(order(N * S / N, decreasing = T), order(N1 * S1 / N1, decreasing = T), check = F, iterations = 1000)
N1 <- N[order(S, decreasing = T)]
bench::mark(order(N * S / N, decreasing = T), order(N1 * S1 / N1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(N * S / N, decreasing = T), order(N1 * S1 / N1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(N * S / N, decreasing = T), order(N1 * S1 / N1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(N * S / N, decreasing = T), order(N1 * S1 / N1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(S, decreasing = T), order(S1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(S, decreasing = T), order(S1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(S, decreasing = T), order(S1, decreasing = T), check = F, iterations = 1000)
bench::mark(order(S, decreasing = T), order(S1, decreasing = T), check = F, iterations = 1000)
library(stratallo)
pop507
pop969
rNa
library(stratallo)
rNa
sa1
1/3
